/**
 * 사진 조회 결과를 나타내는 타입이에요.
 */
export interface ImageResponse {
	/** 가져온 사진의 고유 ID예요. */
	id: string;
	/** 사진의 데이터 URI예요. `base64` 옵션이 `true`인 경우 Base64 문자열로 반환돼요. */
	dataUri: string;
}
export interface OpenCameraOptions {
	/**
	 * 이미지를 Base64 형식으로 반환할지 여부를 나타내는 불리언 값이에요.
	 *
	 * 기본값: `false`.
	 */
	base64?: boolean;
	/**
	 * 이미지의 최대 너비를 나타내는 숫자 값이에요.
	 *
	 * 기본값: `1024`.
	 */
	maxWidth?: number;
}
/**
 * @public
 * @category 카메라
 * @name openCamera
 * @description 카메라를 실행해서 촬영된 이미지를 반환하는 함수예요.
 * @param {OpenCameraOptions} options - 카메라 실행 시 사용되는 옵션 객체예요.
 * @param {boolean} [options.base64=false] - 이미지를 Base64 형식으로 반환할지 여부를 나타내는 불리언 값이에요. 기본값은 `false`예요. `true`로 설정하면 `dataUri` 대신 Base64 인코딩된 문자열을 반환해요.
 * @param {number} [options.maxWidth=1024] - 이미지의 최대 너비를 나타내는 숫자 값이에요. 기본값은 `1024`예요.
 * @returns {Promise<ImageResponse>}
 * 촬영된 이미지 정보를 포함한 객체를 반환해요. 반환 객체의 구성은 다음과 같아요:
 * - `id`: 이미지의 고유 식별자예요.
 * - `dataUri`: 이미지 데이터를 표현하는 데이터 URI예요.
 *
 * @example
 * ### 카메라 실행 후 촬영된 사진 가져오기
 *
 * ```tsx
 * import React, { useState } from 'react';
 * 
 * import { openCamera } from '@apps-in-toss/web-framework';
 *
 * const base64 = true;
 *
 * // 카메라를 실행하고 촬영된 이미지를 화면에 표시하는 컴포넌트
 * function Camera() {
 *   const [image, setImage] = useState(null);
 *
 *   const handlePress = async () => {
 *     try {
 *       const response = await openCamera({ base64 });
 *       setImage(response);
 *     } catch (error) {
 *       console.error('사진을 가져오는 데 실패했어요:', error);
 *     }
 *   };
 *
 *   // base64 형식으로 반환된 이미지를 표시하려면 데이터 URL 스키마 Prefix를 붙여야해요.
 *   const imageUri = base64 ? 'data:image/jpeg;base64,' + image.dataUri : image.dataUri;
 *
 *   return (
 *     <div>
 *       {image ? (
 *         <Image source={{ uri: imageUri }} style={{ width: 200, height: 200 }} />
 *       ) : (
 *         <span>사진이 없어요</span>
 *       )}
 *       <input type="button" value="사진 촬영하기" onClick={handlePress} />
 *     </div>
 *   );
 * }
 * ```
 */
export declare function openCamera(options?: OpenCameraOptions): Promise<ImageResponse>;

export {};
