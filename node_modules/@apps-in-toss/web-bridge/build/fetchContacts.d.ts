/**
 * 연락처 정보를 나타내는 타입이에요.
 */
export interface ContactEntity {
	/** 연락처 이름이에요. */
	name: string;
	/** 연락처 전화번호로, 문자열 형식이에요. */
	phoneNumber: string;
}
/**
 * @public
 * @category 연락처
 * @name fetchContacts
 * @description 사용자의 연락처 목록을 페이지 단위로 가져오는 함수예요.
 * @param size - 한 번에 가져올 연락처 개수예요. 예를 들어, 10을 전달하면 최대 10개의 연락처를 가져와요.
 * @param offset - 가져올 연락처의 시작 지점이에요. 처음 호출할 때는 `0`을 전달해야 해요. 이후에는 이전 호출에서 반환된 `nextOffset` 값을 사용해요.
 * @param query - 추가적인 필터링 옵션이에요.
 * @param query.contains - 이름에 특정 문자열이 포함된 연락처만 가져오고 싶을 때 사용해요. 이 값을 전달하지 않으면 모든 연락처를 가져와요.
 * @returns {Promise<{result: { name: string; phoneNumber: string }[]; nextOffset: number | null; done: boolean}>}
 * 연락처 목록과 페이지네이션 정보를 포함한 객체를 반환해요.
 * - `result`: 가져온 연락처 목록이에요.
 * - `nextOffset`: 다음 호출에 사용할 오프셋 값이에요. 더 가져올 연락처가 없으면 `null`이에요.
 * - `done`: 모든 연락처를 다 가져왔는지 여부를 나타내요. 모두 가져왔다면 `true`예요.
 *
 * @signature
 * ```typescript
 * function fetchContacts({ size, offset, query }: {
 *  size: number;
 *  offset: number;
 *  query?: {
 *    contains?: string;
 *  };
 * }): Promise<{
 *  result: ContactEntity[];
 *  nextOffset: number | null;
 *  done: boolean;
 *  }>;
 * ```
 *
 * @example
 * ### 특정 문자열이 포함된 연락처 목록 가져오기
 *
 * ```tsx
 * import React, { useState } from 'react';
 * 
 * import { fetchContacts, ContactEntity } from '@apps-in-toss/web-framework';
 *
 * // 특정 문자열을 포함한 연락처 목록을 가져와 화면에 표시하는 컴포넌트
 * function ContactsList() {
 *   const [contacts, setContacts] = useState<{
 *     result: ContactEntity[];
 *     nextOffset: number | null;
 *     done: boolean;
 *   }>({
 *     result: [],
 *     nextOffset: null,
 *     done: false,
 *   });
 *
 *   const handlePress = async () => {
 *     try {
 *       if (contacts.done) {
 *         console.log('모든 연락처를 가져왔어요.');
 *         return;
 *       }
 *
 *       const response = await fetchContacts({
 *         size: 10,
 *         offset: contacts.nextOffset ?? 0,
 *         query: { contains: '김' },
 *       });
 *       setContacts((prev) => ({
 *         result: [...prev.result, ...response.result],
 *         nextOffset: response.nextOffset,
 *         done: response.done,
 *       }));
 *     } catch (error) {
 *       console.error('연락처를 가져오는 데 실패했어요:', error);
 *     }
 *   };
 *
 *   return (
 *     <div>
 *       {contacts.result.map((contact, index) => (
 *         <span key={index}>{contact.name}: {contact.phoneNumber}</span>
 *       ))}
 *       <input type="button"
 *         value={contacts.done ? '모든 연락처를 가져왔어요.' : '다음 연락처 가져오기'}
 *         disabled={contacts.done}
 *         onClick={handlePress}
 *       />
 *     </div>
 *   );
 * }
 * ```
 */
export declare function fetchContacts({ size, offset, query, }: {
	size: number;
	offset: number;
	query?: {
		contains?: string;
	};
}): Promise<{
	result: ContactEntity[];
	nextOffset: number | null;
	done: boolean;
}>;

export {};
